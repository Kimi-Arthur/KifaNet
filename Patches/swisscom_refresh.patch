Index: src/Kifa.Tools.DataUtil/Commands/RefreshCommand.cs
===================================================================
diff --git a/src/Kifa.Tools.DataUtil/Commands/RefreshCommand.cs b/src/Kifa.Tools.DataUtil/Commands/RefreshCommand.cs
deleted file mode 100644
--- a/src/Kifa.Tools.DataUtil/Commands/RefreshCommand.cs	
+++ /dev/null	
@@ -1,29 +0,0 @@
-using CommandLine;
-using Kifa.Service;
-using NLog;
-
-namespace Kifa.Tools.DataUtil.Commands;
-
-[Verb("refresh",
-    HelpText = "Refresh Data for an entity. Currently tv_shows and animes are supported.")]
-class RefreshCommand : KifaCommand {
-    static readonly Logger logger = LogManager.GetCurrentClassLogger();
-
-    [Value(0, Required = true, HelpText = "Entity to refresh.")]
-    public string EntityId { get; set; }
-
-    public override int Execute() {
-        var segments = EntityId.Split('/');
-        var type = segments[0];
-        var id = segments[1];
-
-        var chef = DataChef.GetChef(type);
-
-        if (chef == null) {
-            logger.Error($"Unknown type name: {type}.");
-            return 1;
-        }
-
-        return (int) logger.LogResult(chef.Refresh(id), "Summary").Status;
-    }
-}
Index: src/Kifa.Tools.DataUtil/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Tools.DataUtil/Program.cs b/src/Kifa.Tools.DataUtil/Program.cs
--- a/src/Kifa.Tools.DataUtil/Program.cs	
+++ b/src/Kifa.Tools.DataUtil/Program.cs	
@@ -6,6 +6,6 @@
 class Program {
     static int Main(string[] args)
         => KifaCommand.Run(
-            parameters => Parser.Default.ParseArguments(parameters, typeof(RefreshCommand),
-                typeof(ImportCommand), typeof(ExportCommand), typeof(LinkCommand)), args);
+            parameters => Parser.Default.ParseArguments(parameters, typeof(ImportCommand),
+                typeof(ExportCommand), typeof(LinkCommand)), args);
 }
Index: src/Kifa.Cloud.Swisscom/SwisscomStorageClient.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Cloud.Swisscom/SwisscomStorageClient.cs b/src/Kifa.Cloud.Swisscom/SwisscomStorageClient.cs
--- a/src/Kifa.Cloud.Swisscom/SwisscomStorageClient.cs	
+++ b/src/Kifa.Cloud.Swisscom/SwisscomStorageClient.cs	
@@ -21,7 +21,7 @@
 
     public static List<StorageMapping> StorageMappings { get; set; }
 
-    public SwisscomAccount Account => SwisscomAccount.Client.Get(AccountId, true);
+    public SwisscomAccount Account => SwisscomAccount.Client.Get(AccountId);
 
     public override string Type => "swiss";
 
@@ -183,14 +183,14 @@
     }
 
     public static string FindAccount(List<string> accountIds, long length) {
-        var account = SwisscomAccount.Client.Get(accountIds, false).OrderBy(a => a.LeftQuota)
+        var account = SwisscomAccount.Client.Get(accountIds).OrderBy(a => a.LeftQuota)
             .FirstOrDefault(s => s.LeftQuota >= length + GraceSize);
         if (account == null) {
             throw new InsufficientStorageException();
         }
 
         // We will assume the quota is up to date here.
-        account = SwisscomAccount.Client.Get(account.Id, true);
+        account = SwisscomAccount.Client.Get(account.Id);
         if (account.LeftQuota < length + GraceSize) {
             logger.Fatal("Unexpectedly, the account doesn't have enough quota.");
             throw new InsufficientStorageException();
Index: src/Kifa.Web.Api/Controllers/Accounts/SwisscomAccountController.cs
===================================================================
diff --git a/src/Kifa.Web.Api/Controllers/Accounts/SwisscomAccountController.cs b/src/Kifa.Web.Api/Controllers/Accounts/SwisscomAccountController.cs
--- a/src/Kifa.Web.Api/Controllers/Accounts/SwisscomAccountController.cs	
+++ b/src/Kifa.Web.Api/Controllers/Accounts/SwisscomAccountController.cs	
@@ -45,13 +45,13 @@
     }
 
     public KifaActionResult ReserveQuota(string id, long length) {
-        var data = Get(id, true);
+        var data = Get(id);
         data.ExpectedQuota = Math.Max(data.ExpectedQuota, data.UsedQuota) + length;
         return Set(data);
     }
 
     public KifaActionResult ClearReserve(string id) {
-        var data = Get(id, true);
+        var data = Get(id);
         data.ExpectedQuota = 0;
         return Set(data);
     }
Index: src/Kifa.Tools.DataUtil/Kifa.Tools.DataUtil.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Tools.DataUtil/Kifa.Tools.DataUtil.csproj b/src/Kifa.Tools.DataUtil/Kifa.Tools.DataUtil.csproj
--- a/src/Kifa.Tools.DataUtil/Kifa.Tools.DataUtil.csproj	
+++ b/src/Kifa.Tools.DataUtil/Kifa.Tools.DataUtil.csproj	
@@ -16,20 +16,20 @@
   </PropertyGroup>
 
   <ItemGroup>
-    <ProjectReference Include="..\Kifa.Apps.MomentCounter\Kifa.Apps.MomentCounter.csproj"/>
-    <ProjectReference Include="..\Kifa.Infos\Kifa.Infos.csproj"/>
-    <ProjectReference Include="..\Kifa.Memrise\Kifa.Memrise.csproj"/>
-    <ProjectReference Include="..\Kifa.Music\Kifa.Music.csproj"/>
-    <ProjectReference Include="..\Kifa.Tools\Kifa.Tools.csproj"/>
+    <ProjectReference Include="..\Kifa.Apps.MomentCounter\Kifa.Apps.MomentCounter.csproj" />
+    <ProjectReference Include="..\Kifa.Infos\Kifa.Infos.csproj" />
+    <ProjectReference Include="..\Kifa.Memrise\Kifa.Memrise.csproj" />
+    <ProjectReference Include="..\Kifa.Music\Kifa.Music.csproj" />
+    <ProjectReference Include="..\Kifa.Tools\Kifa.Tools.csproj" />
   </ItemGroup>
 
   <ItemGroup>
-    <PackageReference Include="NLog.Schema" Version="4.6.7"/>
+    <PackageReference Include="NLog.Schema" Version="4.6.7" />
   </ItemGroup>
   <ItemGroup>
     <None Include="..\..\resources\NLog.config">
       <CopyToOutputDirectory>Always</CopyToOutputDirectory>
     </None>
-    <None Include="..\..\resources\Kifa.png" Pack="true" PackagePath="\"/>
+    <None Include="..\..\resources\Kifa.png" Pack="true" PackagePath="\" />
   </ItemGroup>
 </Project>
Index: src/Kifa.Web.Api/Controllers/KifaDataController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Web.Api/Controllers/KifaDataController.cs b/src/Kifa.Web.Api/Controllers/KifaDataController.cs
--- a/src/Kifa.Web.Api/Controllers/KifaDataController.cs	
+++ b/src/Kifa.Web.Api/Controllers/KifaDataController.cs	
@@ -11,22 +11,16 @@
 public abstract class KifaDataController<TDataModel, TServiceClient> : ControllerBase
     where TDataModel : DataModel, new()
     where TServiceClient : KifaServiceClient<TDataModel>, new() {
-
     protected readonly TServiceClient Client = new();
 
-    protected bool? RefreshRequested
-        => Request.Headers.CacheControl.Contains("no-cache") ? true :
-            Request.Headers.CacheControl.Contains("only-if-cached") ? false : null;
-
     // GET api/values
     [HttpGet]
     public ActionResult<SortedDictionary<string, TDataModel>> List() => Client.List();
 
     // GET api/values/$
     [HttpGet("$")]
-    public virtual ActionResult<List<TDataModel?>> Get([FromBody] List<string> ids) {
-        return ids.Select(id => Client.Get(id, RefreshRequested)).ToList();
-    }
+    public virtual ActionResult<List<TDataModel?>> Get([FromBody] List<string> ids)
+        => ids.Select(id => Client.Get(id)).ToList();
 
     // GET api/values/5
     [HttpGet("{id}")]
@@ -36,7 +30,7 @@
             return new NotFoundResult();
         }
 
-        return Client.Get(id, RefreshRequested);
+        return Client.Get(id);
     }
 
     // PATCH api/values/5
@@ -49,33 +43,27 @@
 
     // PATCH api/values/$
     [HttpPatch("$")]
-    public KifaApiActionResult Patch([FromBody] List<TDataModel> values) {
-        foreach (var value in values) {
-            value.Metadata = null;
-        }
-
-        return Client.Update(values);
-    }
+    public KifaApiActionResult Patch([FromBody] List<TDataModel> values)
+        => Client.Update(values.Select(v => {
+            v.Metadata = null;
+            return v;
+        }).ToList());
 
     // POST api/values/5
     [HttpPost("{id}")]
     public KifaApiActionResult Post(string id, [FromBody] TDataModel value) {
         value.Id ??= Uri.UnescapeDataString(id);
         value.Metadata = null;
-        value.Fill();
         return Client.Set(value);
     }
 
     // POST api/values/$
     [HttpPost("$")]
-    public KifaApiActionResult Post([FromBody] List<TDataModel> values) {
-        foreach (var value in values) {
-            value.Metadata = null;
-            value.Fill();
-        }
-
-        return Client.Set(values);
-    }
+    public KifaApiActionResult Post([FromBody] List<TDataModel> values)
+        => Client.Set(values.Select(v => {
+            v.Metadata = null;
+            return v;
+        }).ToList());
 
     [HttpPost("^")]
     public KifaApiActionResult Link([FromBody] List<string> ids)
@@ -90,35 +78,6 @@
     // DELETE api/values/$
     [HttpDelete("$")]
     public KifaApiActionResult Delete([FromBody] List<string> ids) => Client.Delete(ids);
-
-    // POST api/values/$refresh?id={id}
-    // TODO: should be generated.
-    [HttpGet("$refresh")]
-    public KifaApiActionResult RefreshGet([FromQuery] RefreshRequest request) => Refresh(request);
-
-    // POST api/values/$refresh?id={id}
-    // TODO: should be generated.
-    [HttpPost("$refresh")]
-    public KifaApiActionResult RefreshPost([FromBody] RefreshRequest request) => Refresh(request);
-
-    public class RefreshRequest {
-        public string Id { get; set; }
-    }
-
-    // Action [HttpAction("$refresh")]
-    // TODO: Should use the attribute above.
-    public KifaApiActionResult Refresh(RefreshRequest request) {
-        if (request.Id == "$") {
-            var result = new KifaBatchActionResult();
-            foreach (var id in Client.List().Keys) {
-                result.Add(Client.Refresh(id));
-            }
-
-            return result;
-        }
-
-        return Client.Refresh(request.Id);
-    }
 }
 
 public class KifaApiActionResult : IConvertToActionResult {
Index: tests/Kifa.Web.Api.Tests/KifaServiceJsonClientTests/BasicTests.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/Kifa.Web.Api.Tests/KifaServiceJsonClientTests/BasicTests.cs b/tests/Kifa.Web.Api.Tests/KifaServiceJsonClientTests/BasicTests.cs
--- a/tests/Kifa.Web.Api.Tests/KifaServiceJsonClientTests/BasicTests.cs	
+++ b/tests/Kifa.Web.Api.Tests/KifaServiceJsonClientTests/BasicTests.cs	
@@ -208,7 +208,7 @@
         data.Id.Should().Be("new_test");
         data.Data.Should().Be("very good data");
 
-        data.Metadata.Linking.Should().BeNull();
+        data.Metadata?.Linking.Should().BeNull();
     }
 
     [Fact]
@@ -228,7 +228,7 @@
         data.Id.Should().Be("test");
         data.Data.Should().Be("very good data");
 
-        data.Metadata.Linking.Should().BeNull();
+        data.Metadata?.Linking.Should().BeNull();
     }
 
     [Fact]
Index: src/Kifa.Tools.DataUtil/DataChef.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Tools.DataUtil/DataChef.cs b/src/Kifa.Tools.DataUtil/DataChef.cs
--- a/src/Kifa.Tools.DataUtil/DataChef.cs	
+++ b/src/Kifa.Tools.DataUtil/DataChef.cs	
@@ -42,7 +42,6 @@
     string ModelId { get; }
     KifaActionResult Import(string data);
     KifaActionResult<string> Export(string data, bool getAll, bool compact);
-    KifaActionResult Refresh(string id);
     KifaActionResult Link(string target, string link);
 }
 
@@ -84,8 +83,6 @@
             $"# {ModelId}\n{string.Join("\n", updatedItems.Select(item => serializerBuilder.Build().Serialize(new List<TDataModel> { item })))}");
     }
 
-    public KifaActionResult Refresh(string id) => Client.Refresh(id);
-
     public KifaActionResult Link(string target, string link) => Client.Link(target, link);
 
     static List<TDataModel> GetItemsWithExistingOrder(IEnumerable<string> items,
Index: src/Kifa.Web.Api/Controllers/OAuthAccountController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Web.Api/Controllers/OAuthAccountController.cs b/src/Kifa.Web.Api/Controllers/OAuthAccountController.cs
--- a/src/Kifa.Web.Api/Controllers/OAuthAccountController.cs	
+++ b/src/Kifa.Web.Api/Controllers/OAuthAccountController.cs	
@@ -1,6 +1,5 @@
 using System.Net.Http;
 using Kifa.Cloud.OAuth;
-using Kifa.Service;
 using Kifa.Web.Api.Extensions;
 using Microsoft.AspNetCore.Mvc;
 using Microsoft.AspNetCore.Routing;
@@ -43,8 +42,4 @@
 
 public class OAuthAccountClient<TAccount> : KifaServiceJsonClient<TAccount>
     where TAccount : OAuthAccount, new() {
-    public override KifaActionResult Refresh(string id) {
-        var account = Get(id);
-        return account.RefreshAccount().And(() => Set(account));
-    }
 }
Index: src/Kifa.Web.Api/KifaServiceJsonClient.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Web.Api/KifaServiceJsonClient.cs b/src/Kifa.Web.Api/KifaServiceJsonClient.cs
--- a/src/Kifa.Web.Api/KifaServiceJsonClient.cs	
+++ b/src/Kifa.Web.Api/KifaServiceJsonClient.cs	
@@ -49,7 +49,17 @@
         }));
     }
 
-    public override TDataModel? Get(string id, bool? refresh = null) {
+    public override TDataModel? Get(string id) {
+        var data = Retrieve(id);
+        if (data == null) {
+            return null;
+        }
+        data.Fill();
+        WriteTarget(data);
+        return data;
+    }
+
+    public TDataModel? Retrieve(string id) {
         logger.Trace($"Get {ModelId}/{id}");
         var data = Read(id);
         if (data == null) {
@@ -62,25 +72,7 @@
             data.Id = id;
         }
 
-        if (refresh == true || refresh != false && ShouldAutoRefresh(data)) {
-            logger.Trace($"Refreshing {ModelId}/{data.Id}.");
-            var result = data.Fill();
-            if (result != null) {
-                logger.Trace($"Refreshed {ModelId}/{data.Id}.");
-                data.Metadata ??= new DataMetadata();
-                data.Metadata.Freshness ??= new FreshnessMetadata();
-                data.Metadata.Freshness.LastRefreshed = DateTimeOffset.UtcNow;
-                if (result.Value) {
-                    logger.Trace($"Updated {ModelId}/{data.Id}.");
-                    data.Metadata.Freshness.LastUpdated = data.Metadata.Freshness.LastRefreshed;
-                }
-            }
-
-            Set(data);
-        }
-
         logger.Trace($"Got {data}");
-
         return data;
     }
 
@@ -88,7 +80,8 @@
         => KifaActionResult.FromAction(() => {
             logger.Trace($"Set {ModelId}/{data.Id}: {data}");
             data = data.Clone();
-            WriteTarget(data, Get(data.Id)?.Metadata?.Linking?.VirtualLinks);
+            data.Fill();
+            WriteTarget(data, Retrieve(data.Id)?.Metadata?.Linking?.VirtualLinks);
         });
 
     void WriteVirtualItems(TDataModel data, SortedSet<string> originalVirtualLinks) {
@@ -118,7 +111,7 @@
     public override KifaActionResult Update(TDataModel data)
         => KifaActionResult.FromAction(() => {
             logger.Trace($"Update {ModelId}/{data.Id}: {data}");
-            var original = Get(data.Id) ?? new TDataModel();
+            var original = Retrieve(data.Id) ?? new TDataModel();
             foreach (var property in Properties) {
                 if (property.GetValue(data) != null) {
                     property.SetValue(original, property.GetValue(data));
@@ -126,6 +119,7 @@
             }
 
             data = original;
+            data.Fill();
             WriteTarget(data);
         });
 
@@ -160,7 +154,7 @@
     }
 
     public override KifaActionResult Delete(string id) {
-        var item = Get(id);
+        var item = Retrieve(id);
         if (item == null) {
             return new KifaActionResult {
                 Status = KifaActionStatus.BadRequest,
@@ -180,7 +174,7 @@
             if (linking.Target == null) {
                 if (linking.Links != null) {
                     // It means there are still real items.
-                    var nextItem = Get(linking.Links!.First());
+                    var nextItem = Retrieve(linking.Links!.First());
                     linking = nextItem!.Metadata!.Linking!;
 
                     var links = linking.Links!;
@@ -218,8 +212,8 @@
     }
 
     public override KifaActionResult Link(string targetId, string linkId) {
-        var target = Get(targetId);
-        var link = Get(linkId);
+        var target = Retrieve(targetId);
+        var link = Retrieve(linkId);
 
         if (target == null) {
             return LogAndReturn(new KifaActionResult {
@@ -266,14 +260,6 @@
         return KifaActionResult.Success;
     }
 
-    public override KifaActionResult Refresh(string id) {
-        var value = Get(id);
-        value.Fill();
-        return Set(value);
-    }
-
-    public virtual bool ShouldAutoRefresh(TDataModel data) => false;
-
     TDataModel? Read(string id) {
         var data = ReadRaw(id);
         logger.Trace($"Read: {data}");
Index: src/Kifa.Service/KifaServiceClient.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Service/KifaServiceClient.cs b/src/Kifa.Service/KifaServiceClient.cs
--- a/src/Kifa.Service/KifaServiceClient.cs	
+++ b/src/Kifa.Service/KifaServiceClient.cs	
@@ -9,8 +9,8 @@
     string ModelId { get; }
 
     SortedDictionary<string, TDataModel> List();
-    TDataModel? Get(string id, bool? refresh = null);
-    List<TDataModel> Get(List<string> ids, bool? refresh = null);
+    TDataModel? Get(string id);
+    List<TDataModel> Get(List<string> ids);
     KifaActionResult Set(TDataModel data);
     KifaActionResult Set(List<TDataModel> data);
     KifaActionResult Update(TDataModel data);
@@ -18,7 +18,6 @@
     KifaActionResult Delete(string id);
     KifaActionResult Delete(List<string> ids);
     KifaActionResult Link(string targetId, string linkId);
-    KifaActionResult Refresh(string id);
 }
 
 public abstract class BaseKifaServiceClient<TDataModel> : KifaServiceClient<TDataModel>
@@ -36,10 +35,10 @@
     protected List<PropertyInfo> Properties { get; }
 
     public abstract SortedDictionary<string, TDataModel> List();
-    public abstract TDataModel? Get(string id, bool? refresh = null);
+    public abstract TDataModel? Get(string id);
 
-    public virtual List<TDataModel> Get(List<string> ids, bool? refresh = null)
-        => ids.Select(id => Get(id, refresh)).ExceptNull().ToList();
+    public virtual List<TDataModel> Get(List<string> ids)
+        => ids.Select(id => Get(id)).ExceptNull().ToList();
 
     public abstract KifaActionResult Set(TDataModel data);
 
@@ -60,5 +59,4 @@
             (result, actionResult) => result.Add(actionResult));
 
     public abstract KifaActionResult Link(string targetId, string linkId);
-    public abstract KifaActionResult Refresh(string id);
 }
Index: src/Kifa.Service/KifaServiceRestClient.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Kifa.Service/KifaServiceRestClient.cs b/src/Kifa.Service/KifaServiceRestClient.cs
--- a/src/Kifa.Service/KifaServiceRestClient.cs	
+++ b/src/Kifa.Service/KifaServiceRestClient.cs	
@@ -106,26 +106,19 @@
                    new SortedDictionary<string, TDataModel>();
         }, (ex, i) => HandleException(ex, i, $"Failure in LIST {ModelId}"));
 
-    public override TDataModel? Get(string id, bool? refresh = null)
+    public override TDataModel? Get(string id)
         => Retry.Run(() => {
             var request = new HttpRequestMessage(HttpMethod.Get,
-                $"{KifaServiceRestClient.ServerAddress}/{ModelId}/{Uri.EscapeDataString(id)}") {
-                Headers = {
-                    CacheControl = GetCacheHeaderValue(refresh)
-                },
-            };
+                $"{KifaServiceRestClient.ServerAddress}/{ModelId}/{Uri.EscapeDataString(id)}");
 
             return KifaServiceRestClient.Client.GetObject<TDataModel>(request);
         }, (ex, i) => HandleException(ex, i, $"Failure in GET {ModelId}({id})"));
 
-    public override List<TDataModel> Get(List<string> ids, bool? refresh = null)
+    public override List<TDataModel> Get(List<string> ids)
         => ids.Any()
             ? Retry.Run(() => {
                     var request = new HttpRequestMessage(HttpMethod.Get,
                         $"{KifaServiceRestClient.ServerAddress}/{ModelId}/$") {
-                        Headers = {
-                            CacheControl = GetCacheHeaderValue(refresh)
-                        },
                         // Not supported by HTTP spec.
                         Content = new StringContent(
                             JsonConvert.SerializeObject(ids, Defaults.JsonSerializerSettings),
@@ -205,11 +198,6 @@
         }, (ex, i) => HandleException(ex, i, $"Failure in CALL {ModelId}.{action}"));
     }
 
-    public override KifaActionResult Refresh(string id)
-        => KifaActionResult.FromAction(() => Call("refresh", new Dictionary<string, object> {
-            { "id", id }
-        }));
-
     static void HandleException(Exception ex, int index, string message) {
         if (index >= 5 || ex is KifaActionFailedException || ex is HttpRequestException &&
             ex.InnerException is SocketException socketException &&
